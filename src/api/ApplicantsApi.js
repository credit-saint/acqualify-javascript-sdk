/*
 * API Documentation
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@creditsaint.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.ApplicantsApi = factory(root.ApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Applicants service.
   * @module api/ApplicantsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ApplicantsApi. 
   * @alias module:api/ApplicantsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the lookupApplicant operation.
     * @callback module:api/ApplicantsApi~lookupApplicantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns public information about a loan applicant
     * See publicly available financial info about a loan applicant including credit score, based on name, address and date of birth
     * @param {String} firstName Applicant first name
     * @param {String} lastName Applicant last name
     * @param {String} addrLine1 Address line 1
     * @param {String} city City
     * @param {String} state State (2-letter abbreviation)
     * @param {Number} zip Zip code
     * @param {String} dob Date of birth (MM/DD/YYYY)
     * @param {Object} opts Optional parameters
     * @param {String} opts.addrLine2 Address line 2
     * @param {String} opts.email Applicant email address
     * @param {String} opts.phoneNumber Phone number
     * @param {String} opts.loanAmount Loan amount
     * @param {module:api/ApplicantsApi~lookupApplicantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lookupApplicant = function(firstName, lastName, addrLine1, city, state, zip, dob, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling lookupApplicant");
      }

      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling lookupApplicant");
      }

      // verify the required parameter 'addrLine1' is set
      if (addrLine1 === undefined || addrLine1 === null) {
        throw new Error("Missing the required parameter 'addrLine1' when calling lookupApplicant");
      }

      // verify the required parameter 'city' is set
      if (city === undefined || city === null) {
        throw new Error("Missing the required parameter 'city' when calling lookupApplicant");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling lookupApplicant");
      }

      // verify the required parameter 'zip' is set
      if (zip === undefined || zip === null) {
        throw new Error("Missing the required parameter 'zip' when calling lookupApplicant");
      }

      // verify the required parameter 'dob' is set
      if (dob === undefined || dob === null) {
        throw new Error("Missing the required parameter 'dob' when calling lookupApplicant");
      }


      var pathParams = {
      };
      var queryParams = {
        'firstName': firstName,
        'lastName': lastName,
        'addrLine1': addrLine1,
        'addrLine2': opts['addrLine2'],
        'city': city,
        'state': state,
        'zip': zip,
        'dob': dob,
        'email': opts['email'],
        'phoneNumber': opts['phoneNumber'],
        'loanAmount': opts['loanAmount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer_token'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lookup-applicant', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
